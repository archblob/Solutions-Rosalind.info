{-# LANGUAGE BangPatterns #-}
module SharedMotif (
    lcs
    ) where
{-
import qualified Data.Vector.Unboxed as V
import Data.List
sub:: String -> V.Vector String
sub = V.fromList (drop 2) . inits

subseq:: String -> V.Vector String
subseq !t = sbq t V.empty
    where
        sbq !t !v
            | null t = v
            | otherwise = sbq (tail t) (v V.++ (sub t))

sharedMotifs::V.Vector String -> V.Vector String
sharedMotifs !l = V.foldl myInt initial rest
    where
        myInt c r = c `vecIntersect` (subseq r)
        initial = subseq (V.head l)
        rest  = V.tail l
--}
 
